var express = require('express');
var router = express.Router();
var fs = require('fs').promises;
var dotenv = require('dotenv').config();
var OpenAI = require('openai-api')
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const client = require('twilio')(accountSid, authToken);
const MessagingResponse = require('twilio').twiml.MessagingResponse;

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const openai = new OpenAI(OPENAI_API_KEY);

const gptCall = async (fileContent, command, language) => {
  try {
    const engine = 'davinci-codex'

    let prompt = ''
    if (language === 'css') {
      prompt = `Language: css\n\n${fileContent}\n\n/* ${command} */`;
    } else {
      prompt = `Language: pug\n\n${fileContent}\n\n/* ${command} */`;
    }

    const topP = 1
    const presencePenalty = 0.5
    const frequencyPenalty = 0.5
    const temperature = 0.0
    const maxTokens = 150
    const bestOf = 1
    const n = 1
    const stream = false
    const stop = ["/*"]

    /*
    This code is waiting for the OpenAI API to return a prompt completion.
    - generated by stenography 🤖
    */
    const response = await openai.complete({ engine, prompt, maxTokens, temperature, topP, presencePenalty, frequencyPenalty, bestOf, n, stream, stop });

    console.log(response.data)

    // const texts = response.data.choices.map(choice => choice.text);
    // const shortestText = response.data.choices.sort((a, b) => a.text.length - b.text.length)[0].text;

    return {
      code: response.data.choices[0].text,
    }
  } catch (err) {
    throw err;
  }
}

/* GET home page. */
router.get('/', function (req, res, next) {
  res.render('index', { title: 'Express', foods: ['Pizza', 'Pasta', 'Salad'] });
});

router.get('/burritos', function (req, res, next) {
  res.render('test');
});

router.post('/sms', async (req, res) => {
  const twiml = new MessagingResponse();
  await workflow(`${req.body.Body}`)
  // twiml.message('The Robots are coming! Head for the hills!');

  res.writeHead(200, {'Content-Type': 'text/xml'});
  res.end('yeet');
});

const workflow = async function (msg) {
  let testPug = await fs.readFile('./views/test.pug', 'utf8');
  let testCss = await fs.readFile('./public/stylesheets/test.css', 'utf8');

  let isCSS = false;
  if (msg.includes('🎨')) {
    isCSS = true;
    msg = msg.replace('🎨', '');
  }
  else if (msg.includes('🐶')) {
    isCSS = false;
    msg = msg.replace('🐶', '');
  }
 
  if (!isCSS) {
    const tr = await gptCall(testPug, msg, 'pug');
    testPug += "\n" + tr.code.split('\n').map(line => `    ${line}`).join('\n');
    await fs.writeFile('./views/test.pug', testPug, 'utf8');
  } else {
    const tr = await gptCall(testCss, msg, 'css');
    testCss += "\n" + tr.code.trim();
    await fs.writeFile('./public/stylesheets/test.css', testCss, 'utf8');
  }
}

router.post('/test', async function (req, res, next) {
  let testPug = await fs.readFile('./views/test.pug', 'utf8');
  let testCss = await fs.readFile('./public/stylesheets/test.css', 'utf8');

  let body = req.body;

  let isCSS = false;
  if (body.command.includes('🎨')) {
    isCSS = true;
    body.command = body.command.replace('🎨', '');
  }
  else if (body.command.includes('🐶')) {
    isCSS = false;
    body.command = body.command.replace('🐶', '');
  }
 
  if (!isCSS) {
    const tr = await gptCall(testPug, body.command, 'pug');
    testPug += "\n" + tr.code.split('\n').map(line => `    ${line}`).join('\n');
    await fs.writeFile('./views/test.pug', testPug, 'utf8');
    res.status(200).send(testPug);
  } else {
    const tr = await gptCall(testCss, body.command, 'css');
    testCss += "\n" + tr.code.trim();
    await fs.writeFile('./public/stylesheets/test.css', testCss, 'utf8');
    res.status(200).send(testCss);
  }
});

module.exports = router;
